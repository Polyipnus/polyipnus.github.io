<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Polyipnus&#39;s Blog</title>
  <subtitle>万物皆虚，万事皆允</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://polyipnus.github.io/"/>
  <updated>2018-06-24T06:35:41.612Z</updated>
  <id>https://polyipnus.github.io/</id>
  
  <author>
    <name>Polyipnus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://polyipnus.github.io/2018/06/24/daily_20180624_py_profile/"/>
    <id>https://polyipnus.github.io/2018/06/24/daily_20180624_py_profile/</id>
    <published>2018-06-23T16:11:59.610Z</published>
    <updated>2018-06-24T06:35:41.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python性能工具使用初探"><a href="#Python性能工具使用初探" class="headerlink" title="Python性能工具使用初探"></a>Python性能工具使用初探</h1><blockquote>
<p>在python开发过程中，针对性能较差的代码通常需要分析调整，以改善运行的效率。本文将简单介绍python常用的性能分析调整工具，更深入的使用可结合官方文档和实际项目进行实践。</p>
</blockquote>
<h2 id="timeit"><a href="#timeit" class="headerlink" title="timeit"></a>timeit</h2><p>如果项目中只需要简单统计运行时间的情况，<code>timeit</code>简单易用，可以配置任务次数测试运行性能情况。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import timeit</div><div class="line"></div><div class="line">def test():</div><div class="line">    for i in xrange(100000):</div><div class="line">        a = i * i</div><div class="line"></div><div class="line">timeit.timeit(&apos;test()&apos;, &apos;from __main__ import test&apos;, number=1)</div><div class="line">timeit.timeit(&apos;test()&apos;, &apos;from __main__ import test&apos;, number=10)</div></pre></td></tr></table></figure>
</code></pre><a id="more"></a>
<h2 id="profile-cprofile"><a href="#profile-cprofile" class="headerlink" title="profile/cprofile"></a>profile/cprofile</h2><p><code>profile</code>是使用语言都会提供的性能分析工具，<code>cprofile</code>是使用c语言实现的性能测试模块，提供的API和<code>profile</code>一样</p>
<p>运行结果的关键变量:</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ncall</td>
<td>函数运行次数</td>
</tr>
<tr>
<td>tottime</td>
<td>函数的总的运行时间，减去函数中调用子函数的运行时间</td>
</tr>
<tr>
<td>percall</td>
<td>第一个 percall = tottime / nclall </td>
</tr>
<tr>
<td>cumtime</td>
<td>函数及其所有子函数调整的运行时间，也就是函数开始调用到结束的时间。</td>
</tr>
<tr>
<td>percall</td>
<td>第二个 percall = cumtime / nclall</td>
</tr>
</tbody>
</table>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import profile</div><div class="line">profile.run(&apos;test()&apos;)</div><div class="line"></div><div class="line">-- here comes the result</div><div class="line">5 function calls in 0.002 seconds</div><div class="line"></div><div class="line">Ordered by: standard name</div><div class="line"></div><div class="line">ncalls  tottime  percall  cumtime  percall filename:lineno(function)</div><div class="line">    1    0.000    0.000    0.000    0.000 :0(range)</div><div class="line">    1    0.001    0.001    0.001    0.001 :0(setprofile)</div><div class="line">    1    0.000    0.000    0.001    0.001 &lt;string&gt;:1(&lt;module&gt;)</div><div class="line">    0    0.000             0.000          profile:0(profiler)</div><div class="line">    1    0.000    0.000    0.002    0.002 profile:0(test())</div><div class="line">    1    0.001    0.001    0.001    0.001 test.py:3(test)</div></pre></td></tr></table></figure>
</code></pre><h2 id="line-profiler"><a href="#line-profiler" class="headerlink" title="line_profiler"></a>line_profiler</h2><p>首先需要安装<a href="https://pypi.org/project/line_profiler/" target="_blank" rel="external">line_profiler</a>工具库，python2.7的安装可以<code>pip install line_profiler</code>。安装之后kernprof.py会加到环境变量中。line_profiler可以统计每行代码的执行次数和执行时间等，时间单位为微妙。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Total Time</td>
<td>测试代码的总运行时间</td>
</tr>
<tr>
<td>Hits</td>
<td>表示每行代码运行的次数</td>
</tr>
<tr>
<td>Time</td>
<td>每行代码运行的总时间</td>
</tr>
<tr>
<td>Per Hits</td>
<td>每行代码运行一次的时间</td>
</tr>
<tr>
<td>% Time</td>
<td>每行代码运行时间的百分比</td>
</tr>
</tbody>
</table>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line"></div><div class="line">@profile</div><div class="line">def fun():</div><div class="line">    a = 0</div><div class="line">    b = 0</div><div class="line">    for i in range(100000):</div><div class="line">        a = a + i * i</div><div class="line"></div><div class="line">    for i in range(3):</div><div class="line">        b += 1</div><div class="line">        time.sleep(0.1)</div><div class="line"></div><div class="line">    return a + b</div><div class="line"></div><div class="line"># run test</div><div class="line">fun()</div></pre></td></tr></table></figure>
</code></pre><p> 执行kernprof -l -v test_line_profiler.py</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Wrote profile results to line_profile_test.py.lprof</div><div class="line">Timer unit: 1e-06 s</div><div class="line"></div><div class="line">Total time: 0.411613 s</div><div class="line">File: line_profile_test.py</div><div class="line">Function: fun at line 5</div><div class="line"></div><div class="line">Line #      Hits         Time  Per Hit   % Time  Line Contents</div><div class="line">==============================================================</div><div class="line">     5                                           @profile</div><div class="line">     6                                           def fun():</div><div class="line">     7         1          8.0      8.0      0.0      a = 0</div><div class="line">     8         1          1.0      1.0      0.0      b = 0</div><div class="line">     9    100001      46409.0      0.5     11.3      for i in range(100000):</div><div class="line">    10    100000      49603.0      0.5     12.1          a = a + i * i</div><div class="line">    11</div><div class="line">    12         4         27.0      6.8      0.0      for i in range(3):</div><div class="line">    13         3          5.0      1.7      0.0          b += 1</div><div class="line">    14         3     315558.0 105186.0     76.7          time.sleep(0.1)</div><div class="line">    15</div><div class="line">    16         1          2.0      2.0      0.0      return a + b</div></pre></td></tr></table></figure>
</code></pre><h2 id="memory-profiler"><a href="#memory-profiler" class="headerlink" title="memory_profiler"></a>memory_profiler</h2><p>首先需要安装依赖库<a href="https://pypi.org/project/memory_profiler/" target="_blank" rel="external">memory_profiler</a> <code>pip install memory_profiler</code></p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">1.在需要测试的函数加上@profile装饰</div><div class="line">2.执行命令： python -m memory_profiler line_profile_test.py</div><div class="line"></div><div class="line">输出如下：</div><div class="line">Filename: line_profile_test.py</div><div class="line"></div><div class="line">Line #    Mem usage    Increment   Line Contents</div><div class="line">================================================</div><div class="line"> 5   30.855 MiB   30.855 MiB   @profile</div><div class="line"> 6                             def fun():</div><div class="line"> 7   30.855 MiB    0.000 MiB       a = 0</div><div class="line"> 8   30.855 MiB    0.000 MiB       b = 0</div><div class="line"> 9   33.961 MiB    3.105 MiB       for i in range(100000):</div><div class="line">10   33.961 MiB    0.000 MiB           a = a + i * i</div><div class="line">11</div><div class="line">12   33.961 MiB    0.000 MiB       for i in range(3):</div><div class="line">13   33.961 MiB    0.000 MiB           b += 1</div><div class="line">14   33.961 MiB    0.000 MiB           time.sleep(0.1)</div><div class="line">15</div><div class="line">16   33.961 MiB    0.000 MiB       return a + b</div></pre></td></tr></table></figure>
</code></pre><h2 id="objgraph"><a href="#objgraph" class="headerlink" title="objgraph"></a>objgraph</h2><p><a href="https://mg.pov.lt/objgraph/" target="_blank" rel="external">Python Object Graphs</a>库提供的objgraph可以用于绘制python对象图。绘制时依赖库<a href="[https://www.graphviz.org/">graphviz</a> <code>brew install graphviz</code>(mac os)和<a href="https://pypi.org/project/xdot/" target="_blank" rel="external">xdot</a>可以通过<code>pip install xdot</code></p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = []</div><div class="line">&gt;&gt;&gt; y = [x, [x], dict(x=x)]</div><div class="line">&gt;&gt;&gt; import objgraph</div><div class="line">&gt;&gt;&gt; objgraph.show_refs([y], filename=&apos;sample-graph.png&apos;)</div><div class="line">Graph written to ....dot (... nodes)</div><div class="line">Image generated as sample-graph.png</div><div class="line">&gt;&gt;&gt; objgraph.show_backrefs([x], filename=&apos;sample-backref-graph.png&apos;)</div></pre></td></tr></table></figure>
</code></pre><p>画图如下:<br><img src="/assets/tool/sample-graph.png" alt="sample-graph"><br><img src="/assets/tool/sample-backref-graph.png" alt="sample-backref-graph"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python性能工具使用初探&quot;&gt;&lt;a href=&quot;#Python性能工具使用初探&quot; class=&quot;headerlink&quot; title=&quot;Python性能工具使用初探&quot;&gt;&lt;/a&gt;Python性能工具使用初探&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在python开发过程中，针对性能较差的代码通常需要分析调整，以改善运行的效率。本文将简单介绍python常用的性能分析调整工具，更深入的使用可结合官方文档和实际项目进行实践。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;timeit&quot;&gt;&lt;a href=&quot;#timeit&quot; class=&quot;headerlink&quot; title=&quot;timeit&quot;&gt;&lt;/a&gt;timeit&lt;/h2&gt;&lt;p&gt;如果项目中只需要简单统计运行时间的情况，&lt;code&gt;timeit&lt;/code&gt;简单易用，可以配置任务次数测试运行性能情况。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import timeit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def test():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for i in xrange(100000):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a = i * i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;timeit.timeit(&amp;apos;test()&amp;apos;, &amp;apos;from __main__ import test&amp;apos;, number=1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;timeit.timeit(&amp;apos;test()&amp;apos;, &amp;apos;from __main__ import test&amp;apos;, number=10)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://polyipnus.github.io/2018/05/19/daily_20180519_pyint/"/>
    <id>https://polyipnus.github.io/2018/05/19/daily_20180519_pyint/</id>
    <published>2018-05-19T13:09:37.355Z</published>
    <updated>2018-06-20T12:53:58.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python源代码学习-对象机制"><a href="#Python源代码学习-对象机制" class="headerlink" title="Python源代码学习-对象机制"></a>Python源代码学习-对象机制</h2><blockquote>
<p>在Python中, 万物皆对象，而所有对象的共性内容都被定义在PyObject中。PyObject可谓是Python对象机制的基石。<br>本文将简要介绍Python对象机制的实现, 以及其涉及的数据结构和原理。</p>
</blockquote>
<h3 id="对象机制基石-PyObject"><a href="#对象机制基石-PyObject" class="headerlink" title="对象机制基石-PyObject"></a>对象机制基石-<code>PyObject</code></h3><p>在介绍Python对象之前，首先有必要介绍一下<code>PyObject</code>和<code>PyVarObject</code>的定义。通过typedef定义了<code>结构体_object</code>新的数据类型名: <code>PyObject</code>,而<code>PyObject</code>的核心定义在宏<code>PyObject_HEAD</code>。而<code>PyVarObject</code>实际是在<code>PyObject_HEAD</code>的基础上增加了变长数量<code>ob_size</code>字段。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// [object.h]</div><div class="line">// 1. 指向定长python object对象的指针都可以转换为PyObject* </div><div class="line">// 2. 指向变长python object对象的指针都可以转换为PyVarObject*</div><div class="line"></div><div class="line">typedef struct _object &#123;</div><div class="line">    PyObject_HEAD</div><div class="line">&#125; PyObject;</div><div class="line"></div><div class="line">typedef struct &#123;</div><div class="line">    PyObject_VAR_HEAD</div><div class="line">&#125; PyVarObject;</div></pre></td></tr></table></figure>
</code></pre><a id="more"></a>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// PyObject_HEAD 定义</div><div class="line">/* PyObject_HEAD defines the initial segment of every PyObject. */</div><div class="line"></div><div class="line">#define PyObject_HEAD                   \</div><div class="line">    _PyObject_HEAD_EXTRA                \</div><div class="line">    Py_ssize_t ob_refcnt;               \</div><div class="line">    struct _typeobject *ob_type;</div><div class="line"></div><div class="line">// PyObject_VAR_HEAD 定义</div><div class="line">/* PyObject_VAR_HEAD defines the initial segment of all variable-size</div><div class="line"> * container objects.  These end with a declaration of an array with 1</div><div class="line"> * element, but enough space is malloc&apos;ed so that the array actually</div><div class="line"> * has room for ob_size elements.  Note that ob_size is an element count,</div><div class="line"> * not necessarily a byte count.</div><div class="line"> */</div><div class="line">#define PyObject_VAR_HEAD               \</div><div class="line">    PyObject_HEAD                       \</div><div class="line">    Py_ssize_t ob_size; /* Number of items in variable part */</div><div class="line"></div><div class="line">// _PyObject_HEAD_EXTRA 定义</div><div class="line">#ifdef Py_TRACE_REFS</div><div class="line">/* Define pointers to support a doubly-linked list of all live heap objects. */</div><div class="line">#define _PyObject_HEAD_EXTRA            \</div><div class="line">    struct _object *_ob_next;           \</div><div class="line">    struct _object *_ob_prev;</div><div class="line">#define _PyObject_EXTRA_INIT 0, 0,</div><div class="line">#else</div><div class="line">#define _PyObject_HEAD_EXTRA</div><div class="line">#define _PyObject_EXTRA_INIT</div><div class="line">#endif</div></pre></td></tr></table></figure>
</code></pre><p> 在release模式编译Python, 数据类型名PyObject定义如下:</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * _typeobject: Python内部一种特殊对象, 用来指定对象类型的类型对象</div><div class="line"> * ob_refcnt: Python使用基于引用计数的垃圾回收机制</div><div class="line"> */</div><div class="line">typedef struct _object &#123;</div><div class="line">    Py_ssize_t ob_refcnt;        // 引用计数</div><div class="line">    struct _typeobject *ob_type; // 指向结构体对象类型的类型对象指针</div><div class="line">&#125; PyObject;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>对象类型</li>
</ol>
<ol>
<li>定长对象vs变长对象</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python源代码学习-对象机制&quot;&gt;&lt;a href=&quot;#Python源代码学习-对象机制&quot; class=&quot;headerlink&quot; title=&quot;Python源代码学习-对象机制&quot;&gt;&lt;/a&gt;Python源代码学习-对象机制&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在Python中, 万物皆对象，而所有对象的共性内容都被定义在PyObject中。PyObject可谓是Python对象机制的基石。&lt;br&gt;本文将简要介绍Python对象机制的实现, 以及其涉及的数据结构和原理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;对象机制基石-PyObject&quot;&gt;&lt;a href=&quot;#对象机制基石-PyObject&quot; class=&quot;headerlink&quot; title=&quot;对象机制基石-PyObject&quot;&gt;&lt;/a&gt;对象机制基石-&lt;code&gt;PyObject&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在介绍Python对象之前，首先有必要介绍一下&lt;code&gt;PyObject&lt;/code&gt;和&lt;code&gt;PyVarObject&lt;/code&gt;的定义。通过typedef定义了&lt;code&gt;结构体_object&lt;/code&gt;新的数据类型名: &lt;code&gt;PyObject&lt;/code&gt;,而&lt;code&gt;PyObject&lt;/code&gt;的核心定义在宏&lt;code&gt;PyObject_HEAD&lt;/code&gt;。而&lt;code&gt;PyVarObject&lt;/code&gt;实际是在&lt;code&gt;PyObject_HEAD&lt;/code&gt;的基础上增加了变长数量&lt;code&gt;ob_size&lt;/code&gt;字段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// [object.h]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 1. 指向定长python object对象的指针都可以转换为PyObject* &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 2. 指向变长python object对象的指针都可以转换为PyVarObject*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef struct _object &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PyObject_HEAD&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; PyObject;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef struct &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PyObject_VAR_HEAD&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; PyVarObject;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python Descriptor初级篇</title>
    <link href="https://polyipnus.github.io/2017/09/22/daily-20170922-descriptor-md/"/>
    <id>https://polyipnus.github.io/2017/09/22/daily-20170922-descriptor-md/</id>
    <published>2017-09-22T05:26:24.000Z</published>
    <updated>2017-10-04T13:44:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/tool/python.jpg" alt="Python-Logo"></p>
<blockquote>
<p>本文意在阐述Descriptor定义以及展示如何调用Descriptor。深入学习自定义Descriptor和几个内置的Python Descriptor<br>学习Descriptor不仅可以获得更多的工具集，而且可以更好地体会Python的运行原理及其优雅的设计。 </p>
</blockquote>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/tool/python.jpg&quot; alt=&quot;Python-Logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文意在阐述Descriptor定义以及展示如何调用Descriptor。深入学习自定义Descriptor和几个内置的Python Descriptor&lt;br&gt;学习Descriptor不仅可以获得更多的工具集，而且可以更好地体会Python的运行原理及其优雅的设计。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="工具学习" scheme="https://polyipnus.github.io/tags/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>刺客信条-镜花水月，无心去来</title>
    <link href="https://polyipnus.github.io/2017/08/12/daily_20170812_assassins-creed/"/>
    <id>https://polyipnus.github.io/2017/08/12/daily_20170812_assassins-creed/</id>
    <published>2017-08-11T16:00:25.000Z</published>
    <updated>2017-10-05T03:31:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/book/ckxt0.jpg" alt="刺客信条-兄弟会海报">     </p>
<blockquote>
<p>Nothing is true, everything is permitted.万物皆虚，万事皆允。        </p>
</blockquote>
<p><em>—— 《刺客信条2》《刺客信条：兄弟会》《刺客信条：启示录》-Ezio三部曲</em><br><a id="more"></a></p>
<p>实习回来后，在朋友的推荐下玩了刺客信条这款游戏，感触挺深，后来想一定要为它写点文字。闭眼一想，还是那句话萦回脑中：我们为了服侍光明而耕耘于黑暗……万物皆虚，万事皆允。却不知道这句话该怎么翻译，被游戏寓意为“信条”的话语，相对于它的题材所包含的深度，好像任何翻译都会带来偏差。很难用几句话描述清楚这部作品，它展现了完全不同的世界与价值，过去与现在，生存与死亡，仇恨与宽容，这些宽泛弘毅的对立词相互交织，在刀刃与鲜血中重获新释，浓缩于主人公Ezio的一生。</p>
<h2 id="虚"><a href="#虚" class="headerlink" title="虚"></a><strong>虚</strong></h2><p>Ezio诞生于文艺复兴时期的佛罗伦萨，作为银行家的富二代，每日就是游手好闲沾花惹草。还记得游戏的第一个任务就是去打架，然后爬上高楼跟姑娘幽会。生活波澜不惊，基调如翡翠般平和，蓝天白云之下的鲜花之城给予了Ezio太多纨绔子弟的气息。而至于后来，当他每次的任务都要手起刀落快意恩仇，然后安抚亡者的灵魂，当他对深爱的Sophia的请求无奈道出对不起我的时间很宝贵，当他在异乡的深夜给妹妹Claudia满怀深情地写信时，你才会发现，他动荡的内心深处，自有一个不曾惊扰的世界，一个不曾惊扰的翡冷翠。那些逝去的日子，在游戏开头略显无聊的情景，恰如一个简朴的别针，固定在心中最纯粹的角落。</p>
<p><img src="/assets/book/ckxt1.jpg" alt="奔波到威尼斯的Ezio">  </p>
<p>以至于说，何以为正义，真理，信仰，自由？这都是些多么美好的词语，然而都不是Ezio最终想要的，又恰好是他，见过了太多为了这些美好而疯狂追逐，最终坠下深渊的人。好奇害死猫，人又何尝不是？因此，创世的神让人间有了死亡。刺客从天而降，帽檐遮住他的眉宇，和平鸽还不知晓下一刻的慌乱，风起风止间，优雅的袖刃已将迷乱的鲜红绽放。</p>
<p>Ezio更像一个布道者，将“虚”的信条用死亡的方式传谕。而事物的真实与否，本来就无所谓人的好坏。朋友Leonardo是虚的，他花了很多心里发明战争机器，下一刻就想摧毁它们；叔叔Mario是虚的，一个质朴果敢的领路人，在庄园陷落时便虎落平阳；Niccolo也是虚的，一个满腹经纶兢兢业业的刺客首领，却一度被当作内奸。连Ezio本人也是虚的，从佛罗伦萨的起步，到威尼斯的追寻，再到罗马的复兴，最后到君士坦丁堡的迟暮，其实Ezio最终才认识到，自己不也是为所谓的复仇与荣耀努力了一辈子吗？原来那个最先坠入深渊的人，正是Ezio自己。</p>
<p><img src="/assets/book/ckxt2.jpg" alt="刺客从天而降">      </p>
<p>因此，Ezio最后在和害死了父兄的教皇Rodrigo对峙时，留下这句信条而放过了他（最终反被儿子Cesare毒死）。这一刻，不知手染太多鲜血的刺客大师是否想到了多年前的一尘不染的佛罗伦萨。抉择与变卦，过一分钟就不能再回头。Ezio的身后这座辉煌的城市，原本就是他想终结邪恶，获得荣耀的目的地。如今，城市更加辉煌，以往的日子，爱人，自由，却一并失去了踪影。相对于当下，他知道一切于事无补，反而有一种繁花落尽，悄然入土的随性。他赫然发现Nothing is true原来不是对别人的告诫，而是对自己内心深处最无奈的独白。</p>
<h2 id="允"><a href="#允" class="headerlink" title="允"></a><strong>允</strong></h2><p>任何一个刺客，加入brotherhood时都要完成一个仪式。他们从城市最高的塔尖上俯瞰全城，然后向着塔底的草堆高高跃下。他们在跃下的那一刻伸展手臂，一种近乎疯狂的自由呼啸而来，将烦恼和恐惧抛诸脑后，你很容易联想到鹰的意象。我们总是可以将道理示于别人，却无法说服自己。这种仪式无疑是对自身的勇敢与自由最好的诠释，刺客们以这样的方式向城市宣告，他们的行为准则秉承信仰，允许他们在法律和道德中掌握邪恶者的生杀大权。他们称之为“信仰之跃”。</p>
<p><img src="/assets/book/ckxt3.jpg" alt="信仰之跃">      </p>
<p>他们在塔尖飘飞消失，城市的风景情韵尽收眼底，背后是虚无的高塔，火焰，荣耀，前方是被允许的使命。而一个人的好与坏，生与死，无时不在拷问着Ezio的灵魂。是的，他也刺杀过好人，而他更多选择了沉默与忘却。允许，到底谁在允许？导师Altair在多次刺杀后终于有觉悟的说：“我所杀的人都对我说了些奇怪的话。他们都没有后悔。即使快死了，他们也看着对胜利很有自信。法律不是来自于神，而是理性。我现在明白了我们的信条不是要求我们去自由。是要求我们智慧。”一个允字，要么成为刺杀后不觉得罪恶的借口，要么成为超越假象的大智慧。</p>
<p>游戏情节里有一幕我印象特别深，年迈的Ezio将地下城军火库的首领刺死，单膝跪地抱着他的尸体，缓缓的说：“杀戮是可耻的…”。你能否想象，这是一个手沾鲜血，以刺杀为荣的刺客大师，对着刚被自己刺杀的将亡人说出的一番话。人到了死神降临这一步，才会明白所谓是非成败转头空，才会明白权利和金钱都会在下一次眨眼中灰飞烟灭。而杀人者Ezio此时最想告诉对方的，就是对方杀戮的原罪，不是其他。Ezio此时的眼神不是锋利的，而是坚定如磐石，我想到这一步，头发灰白的Ezio是参透了信条何谓“万事皆允”。Ezio异常从容与坚定，他知道他的杀戮必将会带来救赎，这是上天的允许，也是内心的智慧。刀锋使处，字句溃逃，任何的道理都无法阻止手中将逝的灵魂。<br><img src="/assets/book/ckxt4.jpg" alt="年迈的Ezio">      </p>
<p>到了这个时候，才知道年过半百的Ezio为什么在君士坦丁堡受这么多人的尊重，才知道为什么他严厉指责因鲁莽而错杀他人的徒弟，不全是因为高明的刺杀艺术，更多的是他比更多年轻人知道内心一个允字的定夺。而最后，Ezio完成了对自己的救赎，英雄迟暮，卸甲归田。一颗颠簸的心，终于泡在村灯狗吠之中。在定夺了这么多人的命运之后，他终于想到了自己，想到了Sophia，想到了佛罗伦萨。如果世上有一个人能阻止他，那这个人肯定是Ezio自己，因而他允许了英雄的离去，从容的卸下袖剑，留下背影，自此，永不回头。而门前的花与阳光在岁月中偷偷窜出，似乎等了他几十年。</p>
<p>Ezio最后的信：</p>
<blockquote>
<p>When I was a young man,<br>当我还是个年轻的小伙子<br>I had liberty, but I did not see it.<br>我拥有自由，却从未认知<br>I had time, but I did not know it.<br>我拥有时间，却毫不知情<br>And I had love, but I did not feel it.<br>而我亦拥有爱，却从未感觉到<br>Many decades would pass before I understood the meaning of all three.<br>直到数十年过去后，我才真正理解这三项的意义<br>And now, the twilight of my life, misunderstanding has past into contentment.<br>而现在，垂暮之年的我，这领悟让我感到满足<br>Love, liberty, and time: once was so disposable, are the fuels that drive me forward.<br>曾经能自由支配的爱，自由以及时间，是支持我前进的动力<br>And love, most especially, mia caro.<br>而爱，是最特别的一个， 亲爱的<br>For you, our children, our brothers and sisters.<br>为你，为我们的孩子以及为我们的兄弟姐妹们<br>And for the vast and wonderful world that gives us lives and keeps us guessing,<br>为这赐予我们生命与惊奇的广阔，精彩的世界<br>endless affection，mio Sofia,<br>至死不渝的挚爱， 我的索菲亚<br>Forever yours, Ezio Auditore<br>永远属于你的， Ezio Auditore  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/book/ckxt0.jpg&quot; alt=&quot;刺客信条-兄弟会海报&quot;&gt;     &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nothing is true, everything is permitted.万物皆虚，万事皆允。        &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—— 《刺客信条2》《刺客信条：兄弟会》《刺客信条：启示录》-Ezio三部曲&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="读书感悟" scheme="https://polyipnus.github.io/tags/%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>欠你一句别了，青春</title>
    <link href="https://polyipnus.github.io/2017/08/11/daily_20170812_deepthought/"/>
    <id>https://polyipnus.github.io/2017/08/11/daily_20170812_deepthought/</id>
    <published>2017-08-11T15:22:20.000Z</published>
    <updated>2017-10-03T03:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4922660&auto=0&height=66" style="margin-left: -10px;"></iframe>

<blockquote>
<p>流水年华, 物是人非, 岁月已悄上眉梢. 那曾经一起幻想的小屁孩, 都渐行渐远, 聚少离多.<br>父母渐老, 自力尚浅, 责任已悄上肩膀. 那曾经一起玩耍的小屁孩, 都结婚生子, 养家糊口.<br><strong>…</strong></p>
</blockquote>
<a id="more"></a>
<p><br></p>
<font color="#D2B48C"><em>写给开始..</em></font>

<p><em>还记得，一起打闹穿梭在稻田间</em><br><em>那时候，清澈的笑声荡漾在天际间</em><br><em>微风中，仿佛弥漫着甜蜜的果酿</em><br><em>不经意，传来迷人的飘香</em></p>
<p><em>那赖皮的老黄牛啊@…@</em><br><em>可不允再偷吃邻家老黄的稻苗呀~</em><br><em>老黄呀，有话好说，放下你手中的锄头~_~</em><br><em>扛着追跑可累呀@_@</em></p>
<p><em>还有你这个笨笨的小朱子$_$</em><br><em>下次偷大朱子的番薯呀..</em><br><em>记得不要把大朱子偷回来&gt;_&lt;</em></p>
<p><em>可怜的老妈子~</em><br><em>每天都要挨家挨户把我捆回去~_~</em><br><em>还有那做不会的作业</em><br><em>学霸同桌这次再借我抄一会~~</em></p>
<p><font color="#D2B48C"><em>最后写给自己..</em></font><br><strong><font color="#0099FF">岁月如若静好, 则怡养身心. 岁月倘若惨淡，则多番历经…</font></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=4922660&amp;auto=0&amp;height=66&quot; style=&quot;margin-left: -10px;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;流水年华, 物是人非, 岁月已悄上眉梢. 那曾经一起幻想的小屁孩, 都渐行渐远, 聚少离多.&lt;br&gt;父母渐老, 自力尚浅, 责任已悄上肩膀. 那曾经一起玩耍的小屁孩, 都结婚生子, 养家糊口.&lt;br&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="心情随笔" scheme="https://polyipnus.github.io/tags/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 高级配置</title>
    <link href="https://polyipnus.github.io/2017/08/10/daily_20170810_nginx/"/>
    <id>https://polyipnus.github.io/2017/08/10/daily_20170810_nginx/</id>
    <published>2017-08-10T03:18:54.000Z</published>
    <updated>2017-10-03T01:53:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>反向代理(reverse proxy)</p>
<p>终结客户端连接，并且生成另一个新的连接，新的连接代表客户端向上游服务器（upstream server）生成连接。</p>
</blockquote>
<h2 id="proxy-pass-指令"><a href="#proxy-pass-指令" class="headerlink" title="proxy_pass 指令"></a>proxy_pass 指令</h2><blockquote>
<p>参数说明</p>
</blockquote>
<pre><code># 没有必要重写Location头, 将proxy_redirect指令设置为off;
proxy_redirect off;

# 设置Host头, 因此上游服务器能够将请求映射到一个虚拟服务器
# 否则使用用户输入的URL中的主机部分
# X-Real-IP 和X-Forwarded-For头有相似的目的都用于转发客户端IP
# 地址到上游服务器得到信息
# $X-Real_IP变量在remote_addr头内使用就是Nginx接受客户端请求的IP地址
# $proxy_add_x_forwarded_for变量包含在X-Forwarded-For头中，它源于客户端请求,跟随有$remote_addr变量
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</code></pre><a id="more"></a>
<pre><code># client_max_body_size指令不是严格的代理模块指令，但与代理相关
# 如果这个值设置太低，将不能上传文件到上流服务器上，在设置需要注意
# 通过web窗口上传的文件大小通常要大于它在文件系统中的大小
client_max_body_size 10m;

client_connetct_timeout 30;
client_body_buffer_size 128k;

# 在建立与上游服务器初始连接的过程中，proxy_connect_timeout指令表明
# Nginx将会等待的时间长度
proxy_connect_timeout 30;

# 设置Nginx同上游服务器连接成功再次操作的等待时间
proxy_send_timeout 15;
proxu_read_timeout 15;

# FreeBSD系统下有效，并且在该协议下传输数据之前
# 指定套接字发送缓冲应该容纳的字节数
proxy_send_lowat 12000;

proxy_buffer_size 4k;
proxy_buffers 4 32k;
proxy_busy_buffers_size 64k;

# 控制worker进程阻塞后台数据的显示器。值越大，处理阻塞的时间越长
proxy_temp_file_write_size 64k;
</code></pre><blockquote>
<p>举个粟子</p>
</blockquote>
<pre><code>server {

    listen 80;

    location ~^/local {
        proxy_pass http://localhost:8080;
    }

    location / {
        # Include 配置文件
        include proxy.conf;

        # 覆盖原有值
        client_max_body_size 50m;

        rewrite /(.*)$ /index.html?page=$1 break;
        proxy_pass http://localhost:8080;
    }
}
</code></pre><h2 id="upstream-模块"><a href="#upstream-模块" class="headerlink" title="upstream 模块"></a>upstream 模块</h2><blockquote>
<p>待更新</p>
</blockquote>
<h2 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h2><p>&gt;</p>
<ol>
<li><a href="http://supervisord.org/index.html" target="_blank" rel="external">官方主页</a></li>
<li><a href="https://github.com/Supervisor/supervisor" target="_blank" rel="external">源码GitHub</a><p><img src="/assets/tool/daily_nginx_01.jpg" alt="" width="400" height="80"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;反向代理(reverse proxy)&lt;/p&gt;
&lt;p&gt;终结客户端连接，并且生成另一个新的连接，新的连接代表客户端向上游服务器（upstream server）生成连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;proxy-pass-指令&quot;&gt;&lt;a href=&quot;#proxy-pass-指令&quot; class=&quot;headerlink&quot; title=&quot;proxy_pass 指令&quot;&gt;&lt;/a&gt;proxy_pass 指令&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;参数说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;# 没有必要重写Location头, 将proxy_redirect指令设置为off;
proxy_redirect off;

# 设置Host头, 因此上游服务器能够将请求映射到一个虚拟服务器
# 否则使用用户输入的URL中的主机部分
# X-Real-IP 和X-Forwarded-For头有相似的目的都用于转发客户端IP
# 地址到上游服务器得到信息
# $X-Real_IP变量在remote_addr头内使用就是Nginx接受客户端请求的IP地址
# $proxy_add_x_forwarded_for变量包含在X-Forwarded-For头中，它源于客户端请求,跟随有$remote_addr变量
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="工具学习" scheme="https://polyipnus.github.io/tags/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>supervisor 快速进阶</title>
    <link href="https://polyipnus.github.io/2017/08/10/daily_20170811_supervisor/"/>
    <id>https://polyipnus.github.io/2017/08/10/daily_20170811_supervisor/</id>
    <published>2017-08-10T03:10:14.000Z</published>
    <updated>2017-10-02T15:32:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>supervisor是python实现的进程管理工具，能将命令行进程变为后台daemon。管理进程的启动，重启，关闭。</p>
<p>有兴趣的话可以看下<a href="http://supervisord.org/index.html" target="_blank" rel="external">官方详细介绍</a>。</p>
</blockquote>
<h2 id="1-安装说明"><a href="#1-安装说明" class="headerlink" title="1. 安装说明"></a>1. 安装说明</h2><pre><code>1. Debian/Ubuntu可以直接通过apt-get安装:

   apt-get install supervisor

2. supervisor配置文件

   echo_supervisord_conf &gt; /etc/supervisord.conf
</code></pre><a id="more"></a>
<h2 id="2-配置说明"><a href="#2-配置说明" class="headerlink" title="2. 配置说明"></a>2. 配置说明</h2><p>   下面是配置内容说明</p>
<pre><code>[unix_http_server]
file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用
;chmod=0700                 ; socket 文件的 mode，默认是 0700
;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid

;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面
;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性
;username=user              ; 登录管理后台的用户名
;password=123               ; 登录管理后台的密码

[supervisord]
logfile=/tmp/supervisord.log    ; 日志文件，默认是 $CWD/supervisord.log
logfile_maxbytes=50MB           ; 日志文件大小，超出会 rotate，默认 50MB
logfile_backups=10              ; 日志文件保留备份数量默认 10
loglevel=info                   ; 日志级别，默认 info，其它: debug,warn,trace
pidfile=/tmp/supervisord.pid    ; pid 文件
nodaemon=false                  ; 是否在前台启动，默认是 false，即以 daemon 的方式启动
minfds=1024                     ; 可以打开的文件描述符的最小值，默认 1024
minprocs=200                    ; 可以打开的进程数的最小值，默认 200

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock   ; 通过UNIX socket连接supervisord
serverurl=http://127.0.0.1:9001         ; 通过 HTTP 的方式连接 supervisord

[include]                               ; 包含其他的配置文件
files = relative/directory/*.ini        ; 可以是 *.conf 或 *.ini
</code></pre><h2 id="3-进程使用例子"><a href="#3-进程使用例子" class="headerlink" title="3. 进程使用例子"></a>3. 进程使用例子</h2><pre><code>使用例子说明

    [unix_http_server]
    file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用
    ;chmod=0700                 ; socket 文件的 mode，默认是 0700
    ;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid

    ;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面
    ;port=127.0.0.1:9001        ; Web 管理后台运行的IP 和端口，如果开放到公网需要注意安全性
    ;username=user              ; 登录管理后台的用户名
    ;password=123               ; 登录管理后台的密码

    [supervisord]
    logfile=/tmp/supervisord.log    ; 日志文件，默认是 $CWD/supervisord.log
    logfile_maxbytes=50MB           ; 日志文件大小，超出会 rotate，默认 50MB
    logfile_backups=10              ; 日志文件保留备份数量默认 10
    loglevel=info                   ; 日志级别，默认 info，其它: debug, warn, trace
    pidfile=/tmp/supervisord.pid    ; pid 文件
    nodaemon=false                  ; 是否在前台启动，默认是 false，即以 daemon 的方式启动
    minfds=1024                     ; 可以打开的文件描述符的最小值，默认 1024
    minprocs=200                    ; 可以打开的进程数的最小值，默认 200

    ; the below section must remain in the config file for RPC
    ; (supervisorctl/web interface) to work, additional interfaces may be
    ; added by defining them in separate rpcinterface: sections
    [rpcinterface:supervisor]
    supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

    [supervisorctl]
    serverurl=unix:///tmp/supervisor.sock   ; 通过UNIX socket连接supervisord
    serverurl=http://127.0.0.1:9001         ; 通过HTTP的方式连接 supervisord

    [include]                               ; 包含其他的配置文件
    files = relative/directory/*.ini        ; 可以是 *.conf 或 *.ini
</code></pre><h2 id="4-配置引用"><a href="#4-配置引用" class="headerlink" title="4. 配置引用"></a>4. 配置引用</h2><p>将进程配置添加到supervisord.conf文件中, 推荐将各个进程配置放到单独的文件中，然后通过[include]配置项引用</p>
<pre><code>[include]
files = /etc/supervisor/*.conf
</code></pre><h2 id="5-服务启动"><a href="#5-服务启动" class="headerlink" title="5. 服务启动"></a>5. 服务启动</h2><pre><code>supervisord -c /etc/supervisord.conf 
</code></pre><h2 id="6-服务客户端管理"><a href="#6-服务客户端管理" class="headerlink" title="6. 服务客户端管理"></a>6. 服务客户端管理</h2><p>可以使用supervisord的命令行客户端管理工具supervisorctl，来管理进程。</p>
<pre><code>$ supervisorctl status
$ supervisorctl stop usercenter
$ supervisorctl start usercenter
$ supervisorctl restart usercenter
$ supervisorctl reread
$ supervisorctl update
</code></pre><h2 id="7-supervisor-web管理界面"><a href="#7-supervisor-web管理界面" class="headerlink" title="7. supervisor web管理界面"></a>7. supervisor web管理界面</h2><p>在浏览器中输入<code>http://127.0.0.1:9001</code>，可进入web管理界面</p>
<pre><code>[inet_http_server]      ; HTTP 服务器，提供 web 管理界面
; port=127.0.0.1:9001   ; Web 管理后台运行的IP和端口，如果开放到公网，需要注意安全性
; username=user         ; 登录管理后台的用户名
; password=123          ; 登录管理后台的密码
</code></pre><h2 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h2><p>更多使用和参考资料可查看以下资源</p>
<ol>
<li><a href="http://supervisord.org/index.html" target="_blank" rel="external">官方主页</a></li>
<li><a href="https://github.com/Supervisor/supervisor" target="_blank" rel="external">源码GitHub</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;supervisor是python实现的进程管理工具，能将命令行进程变为后台daemon。管理进程的启动，重启，关闭。&lt;/p&gt;
&lt;p&gt;有兴趣的话可以看下&lt;a href=&quot;http://supervisord.org/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方详细介绍&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-安装说明&quot;&gt;&lt;a href=&quot;#1-安装说明&quot; class=&quot;headerlink&quot; title=&quot;1. 安装说明&quot;&gt;&lt;/a&gt;1. 安装说明&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. Debian/Ubuntu可以直接通过apt-get安装:

   apt-get install supervisor

2. supervisor配置文件

   echo_supervisord_conf &amp;gt; /etc/supervisord.conf
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="工具学习" scheme="https://polyipnus.github.io/tags/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
